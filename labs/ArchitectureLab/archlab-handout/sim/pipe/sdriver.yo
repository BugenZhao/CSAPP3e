                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4b002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f60802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7d801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 
                            | #	xorq 	%rax, %rax		# count = 0;
0x032: c0f2fdffffffffffffff | 	iaddq	$-3, %rdx
0x03c: 76fd00000000000000   | 	jg		loop0			# len >= 2
0x045:                      | test_rest:
0x045: c0f20300000000000000 | 	iaddq	$3, %rdx
0x04f: 765900000000000000   | 	jg		rest0
0x058: 90                   | 	ret
0x059:                      | rest0:
0x059: 50870000000000000000 | 	mrmovq	(%rdi), %r8
0x063: 50970800000000000000 | 	mrmovq	8(%rdi), %r9
0x06d: 40860000000000000000 | 	rmmovq	%r8, (%rsi)
0x077: 6288                 | 	andq	%r8, %r8
0x079: 718c00000000000000   | 	jle		rest0_t
0x082: c0f00100000000000000 | 	iaddq	$1, %rax
0x08c:                      | rest0_t:
0x08c: c0f2ffffffffffffffff | 	iaddq	$-1, %rdx
0x096: 76a000000000000000   | 	jg		rest1
0x09f: 90                   | 	ret
0x0a0:                      | rest1:
0x0a0: 50a71000000000000000 | 	mrmovq	16(%rdi), %r10
0x0aa: 40960800000000000000 | 	rmmovq	%r9, 8(%rsi)
0x0b4: 6299                 | 	andq	%r9, %r9
0x0b6: 71c900000000000000   | 	jle		rest1_t
0x0bf: c0f00100000000000000 | 	iaddq	$1, %rax
0x0c9:                      | rest1_t:
0x0c9: c0f2ffffffffffffffff | 	iaddq	$-1, %rdx
0x0d3: 76dd00000000000000   | 	jg 		rest2
0x0dc: 90                   | 	ret
0x0dd:                      | rest2:
0x0dd: 40a61000000000000000 | 	rmmovq	%r10, 16(%rsi)
0x0e7: 62aa                 | 	andq	%r10, %r10
0x0e9: 71d101000000000000   | 	jle		Done
0x0f2: c0f00100000000000000 | 	iaddq	$1, %rax
0x0fc: 90                   | 	ret
                            | 
                            | 
0x0fd:                      | loop0:
0x0fd: 50870000000000000000 | 	mrmovq	(%rdi), %r8
0x107: c0f72000000000000000 | 	iaddq	$32, %rdi
0x111: 40860000000000000000 | 	rmmovq	%r8, (%rsi)
0x11b: 6288                 | 	andq	%r8, %r8
0x11d: 713001000000000000   | 	jle		loop1
0x126: c0f00100000000000000 | 	iaddq	$1, %rax
0x130:                      | loop1:
0x130: 5087e8ffffffffffffff | 	mrmovq	-24(%rdi), %r8
0x13a: c0f62000000000000000 | 	iaddq	$32, %rsi
0x144: 4086e8ffffffffffffff | 	rmmovq	%r8, -24(%rsi)
0x14e: 6288                 | 	andq	%r8, %r8
0x150: 716301000000000000   | 	jle 	loop2
0x159: c0f00100000000000000 | 	iaddq	$1, %rax
0x163:                      | loop2:
0x163: 5087f0ffffffffffffff | 	mrmovq	-16(%rdi), %r8
0x16d: 5097f8ffffffffffffff | 	mrmovq	-8(%rdi), %r9
0x177: 4086f0ffffffffffffff | 	rmmovq	%r8, -16(%rsi)
0x181: 6288                 | 	andq	%r8, %r8
0x183: 719601000000000000   | 	jle 	loop3
0x18c: c0f00100000000000000 | 	iaddq	$1, %rax
0x196:                      | loop3:
0x196: 4096f8ffffffffffffff | 	rmmovq	%r9, -8(%rsi)
0x1a0: 6299                 | 	andq	%r9, %r9
0x1a2: 71b501000000000000   | 	jle		loop_end
0x1ab: c0f00100000000000000 | 	iaddq	$1, %rax
                            | 
0x1b5:                      | loop_end:
0x1b5: c0f2fcffffffffffffff | 	iaddq	$-4, %rdx
0x1bf: 76fd00000000000000   | 	jg		loop0
0x1c8: 704500000000000000   | 	jmp		test_rest
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1d1:                      | Done:
0x1d1: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1d2:                      | End:
                            | #/* $end ncopy-ys */
0x1d2:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1d8:                      | 	.align 8
0x1d8:                      | src:
0x1d8: ffffffffffffffff     | 	.quad -1
0x1e0: feffffffffffffff     | 	.quad -2
0x1e8: 0300000000000000     | 	.quad 3
0x1f0: 0400000000000000     | 	.quad 4
0x1f8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x200:                      | 	.align 16
0x200:                      | Predest:
0x200: fadebc0000000000     | 	.quad 0xbcdefa
0x208:                      | dest:
0x208: abefcd0000000000     | 	.quad 0xcdefab
0x210: abefcd0000000000     | 	.quad 0xcdefab
0x218: abefcd0000000000     | 	.quad 0xcdefab
0x220: abefcd0000000000     | 	.quad 0xcdefab
0x228:                      | Postdest:
0x228: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x230:                      | .align 8
                            | # Run time stack
0x230: 0000000000000000     | 	.quad 0
0x238: 0000000000000000     | 	.quad 0
0x240: 0000000000000000     | 	.quad 0
0x248: 0000000000000000     | 	.quad 0
0x250: 0000000000000000     | 	.quad 0
0x258: 0000000000000000     | 	.quad 0
0x260: 0000000000000000     | 	.quad 0
0x268: 0000000000000000     | 	.quad 0
0x270: 0000000000000000     | 	.quad 0
0x278: 0000000000000000     | 	.quad 0
0x280: 0000000000000000     | 	.quad 0
0x288: 0000000000000000     | 	.quad 0
0x290: 0000000000000000     | 	.quad 0
0x298: 0000000000000000     | 	.quad 0
0x2a0: 0000000000000000     | 	.quad 0
0x2a8: 0000000000000000     | 	.quad 0
                            | 
0x2b0:                      | Stack:

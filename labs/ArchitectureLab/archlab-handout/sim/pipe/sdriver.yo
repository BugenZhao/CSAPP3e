                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f49004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6e803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7b003000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 
                            | #	xorq 	%rax, %rax		# count = 0;
0x032: c0f2f8ffffffffffffff | 	iaddq	$-8, %rdx
0x03c: 71dd01000000000000   | 	jle		r_test			# len >= 9
                            | 
                            | 
0x045:                      | loop0:
0x045: 50870000000000000000 | 	mrmovq	(%rdi), %r8
0x04f: c0f74800000000000000 | 	iaddq	$72, %rdi
0x059: 40860000000000000000 | 	rmmovq	%r8, (%rsi)
0x063: 6288                 | 	andq	%r8, %r8
0x065: 717800000000000000   | 	jle		loop1
0x06e: c0f00100000000000000 | 	iaddq	$1, %rax
0x078:                      | loop1:
0x078: 5087c0ffffffffffffff | 	mrmovq	-64(%rdi), %r8
0x082: c0f64800000000000000 | 	iaddq	$72, %rsi
0x08c: 4086c0ffffffffffffff | 	rmmovq	%r8, -64(%rsi)
0x096: 6288                 | 	andq	%r8, %r8
0x098: 71ab00000000000000   | 	jle 	loop2
0x0a1: c0f00100000000000000 | 	iaddq	$1, %rax
0x0ab:                      | loop2:
0x0ab: 5087c8ffffffffffffff | 	mrmovq	-56(%rdi), %r8
0x0b5: 5097d0ffffffffffffff | 	mrmovq	-48(%rdi), %r9
0x0bf: 4086c8ffffffffffffff | 	rmmovq	%r8, -56(%rsi)
0x0c9: 6288                 | 	andq	%r8, %r8
0x0cb: 71de00000000000000   | 	jle 	loop3
0x0d4: c0f00100000000000000 | 	iaddq	$1, %rax
0x0de:                      | loop3:
0x0de: 5087d8ffffffffffffff | 	mrmovq	-40(%rdi), %r8
0x0e8: 4096d0ffffffffffffff | 	rmmovq	%r9, -48(%rsi)
0x0f2: 6299                 | 	andq	%r9, %r9
0x0f4: 710701000000000000   | 	jle 	loop4
0x0fd: c0f00100000000000000 | 	iaddq	$1, %rax
0x107:                      | loop4:
0x107: 5097e0ffffffffffffff | 	mrmovq	-32(%rdi), %r9
0x111: 4086d8ffffffffffffff | 	rmmovq	%r8, -40(%rsi)
0x11b: 6288                 | 	andq	%r8, %r8
0x11d: 713001000000000000   | 	jle 	loop5
0x126: c0f00100000000000000 | 	iaddq	$1, %rax
0x130:                      | loop5:
0x130: 5087e8ffffffffffffff | 	mrmovq	-24(%rdi), %r8
0x13a: 4096e0ffffffffffffff | 	rmmovq	%r9, -32(%rsi)
0x144: 6299                 | 	andq	%r9, %r9
0x146: 715901000000000000   | 	jle 	loop6
0x14f: c0f00100000000000000 | 	iaddq	$1, %rax
0x159:                      | loop6:
0x159: 5097f0ffffffffffffff | 	mrmovq	-16(%rdi), %r9
0x163: 4086e8ffffffffffffff | 	rmmovq	%r8, -24(%rsi)
0x16d: 6288                 | 	andq	%r8, %r8
0x16f: 718201000000000000   | 	jle 	loop7
0x178: c0f00100000000000000 | 	iaddq	$1, %rax
0x182:                      | loop7:
0x182: 5087f8ffffffffffffff | 	mrmovq	-8(%rdi), %r8
0x18c: 4096f0ffffffffffffff | 	rmmovq	%r9, -16(%rsi)
0x196: 6299                 | 	andq	%r9, %r9
0x198: 71ab01000000000000   | 	jle 	loop8
0x1a1: c0f00100000000000000 | 	iaddq	$1, %rax
0x1ab:                      | loop8:
0x1ab: 4086f8ffffffffffffff | 	rmmovq	%r8, -8(%rsi)
0x1b5: 6288                 | 	andq	%r8, %r8
0x1b7: 71ca01000000000000   | 	jle		loop_end
0x1c0: c0f00100000000000000 | 	iaddq	$1, %rax
                            | 
0x1ca:                      | loop_end:
0x1ca: c0f2f7ffffffffffffff | 	iaddq	$-9, %rdx
0x1d4: 764500000000000000   | 	jg		loop0
                            | 
                            | 
                            | 
0x1dd:                      | r_test:
0x1dd: c0f20400000000000000 | 	iaddq	$4, %rdx		# [-8,0] -> [-4,4]	(+4)
0x1e7: 720202000000000000   | 	jl		r_test_l
0x1f0: 763202000000000000   | 	jg		r_test_r
0x1f9: 70f002000000000000   | 	jmp		r4
                            | 
0x202:                      | r_test_l:
0x202: c0f20200000000000000 | 	iaddq	$2, %rdx		# [-4,-1] -> [-2,1]	(+2)
0x20c: 734203000000000000   | 	je		r2
0x215: 761903000000000000   | 	jg		r3
0x21e: c0f20200000000000000 | 	iaddq	$2, %rdx		# [-2,-1] -> [0,1]	(+0)
0x228: 766b03000000000000   | 	jg		r1
0x231: 90                   | 	ret
                            | 
0x232:                      | r_test_r:
0x232: c0f2feffffffffffffff | 	iaddq	$-2, %rdx		# [1,4] -> [-1,2]	(+6)
0x23c: 72c702000000000000   | 	jl		r5
0x245: 739e02000000000000   | 	je		r6
0x24e: c0f2feffffffffffffff | 	iaddq	$-2, %rdx		# [1,2] -> [-1,0]	(+8)
0x258: 727502000000000000   | 	jl		r7
                            | 
0x261:                      | r8:
0x261: 50a73800000000000000 | 	mrmovq	56(%rdi), %r10
0x26b:                      | r8b:
0x26b: 40a63800000000000000 | 	rmmovq	%r10, 56(%rsi)
0x275:                      | r7:
                            | 	# %r10 was never used before. Directly jumping to r7 means %r10 = 0.
0x275: 62aa                 | 	andq	%r10, %r10
0x277: 50a73000000000000000 | 	mrmovq	48(%rdi), %r10
0x281: 719402000000000000   | 	jle		r7b				# 56(%rdi)
0x28a: c0f00100000000000000 | 	iaddq	$1, %rax
0x294:                      | r7b:
0x294: 40a63000000000000000 | 	rmmovq	%r10, 48(%rsi)
0x29e:                      | r6:
0x29e: 62aa                 | 	andq	%r10, %r10
0x2a0: 50a72800000000000000 | 	mrmovq	40(%rdi), %r10
0x2aa: 71bd02000000000000   | 	jle		r6b
0x2b3: c0f00100000000000000 | 	iaddq	$1, %rax
0x2bd:                      | r6b:
0x2bd: 40a62800000000000000 | 	rmmovq	%r10, 40(%rsi)
0x2c7:                      | r5:
0x2c7: 62aa                 | 	andq	%r10, %r10
0x2c9: 50a72000000000000000 | 	mrmovq	32(%rdi), %r10
0x2d3: 71e602000000000000   | 	jle		r5b
0x2dc: c0f00100000000000000 | 	iaddq	$1, %rax
0x2e6:                      | r5b:
0x2e6: 40a62000000000000000 | 	rmmovq	%r10, 32(%rsi)
0x2f0:                      | r4:
0x2f0: 62aa                 | 	andq	%r10, %r10
0x2f2: 50a71800000000000000 | 	mrmovq	24(%rdi), %r10
0x2fc: 710f03000000000000   | 	jle		r4b
0x305: c0f00100000000000000 | 	iaddq	$1, %rax
0x30f:                      | r4b:
0x30f: 40a61800000000000000 | 	rmmovq	%r10, 24(%rsi)
0x319:                      | r3:
0x319: 62aa                 | 	andq	%r10, %r10
0x31b: 50a71000000000000000 | 	mrmovq	16(%rdi), %r10
0x325: 713803000000000000   | 	jle		r3b
0x32e: c0f00100000000000000 | 	iaddq	$1, %rax
0x338:                      | r3b:
0x338: 40a61000000000000000 | 	rmmovq	%r10, 16(%rsi)
0x342:                      | r2:
0x342: 62aa                 | 	andq	%r10, %r10
0x344: 50a70800000000000000 | 	mrmovq	8(%rdi), %r10
0x34e: 716103000000000000   | 	jle		r2b
0x357: c0f00100000000000000 | 	iaddq	$1, %rax
0x361:                      | r2b:
0x361: 40a60800000000000000 | 	rmmovq	%r10, 8(%rsi)
0x36b:                      | r1:
0x36b: 62aa                 | 	andq	%r10, %r10
0x36d: 50a70000000000000000 | 	mrmovq	(%rdi), %r10
0x377: 718a03000000000000   | 	jle		r1b
0x380: c0f00100000000000000 | 	iaddq	$1, %rax
0x38a:                      | r1b:
0x38a: 40a60000000000000000 | 	rmmovq	%r10, (%rsi)
0x394:                      | r1c:
0x394: 62aa                 | 	andq	%r10, %r10
0x396: 71aa03000000000000   | 	jle		Done
0x39f: c0f00100000000000000 | 	iaddq	$1, %rax
0x3a9: 90                   | 	ret
                            | 
                            | 
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3aa:                      | Done:
0x3aa: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3ab:                      | End:
                            | #/* $end ncopy-ys */
0x3ab:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3b0:                      | 	.align 8
0x3b0:                      | src:
0x3b0: ffffffffffffffff     | 	.quad -1
0x3b8: feffffffffffffff     | 	.quad -2
0x3c0: 0300000000000000     | 	.quad 3
0x3c8: 0400000000000000     | 	.quad 4
0x3d0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3e0:                      | 	.align 16
0x3e0:                      | Predest:
0x3e0: fadebc0000000000     | 	.quad 0xbcdefa
0x3e8:                      | dest:
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408:                      | Postdest:
0x408: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x410:                      | .align 8
                            | # Run time stack
0x410: 0000000000000000     | 	.quad 0
0x418: 0000000000000000     | 	.quad 0
0x420: 0000000000000000     | 	.quad 0
0x428: 0000000000000000     | 	.quad 0
0x430: 0000000000000000     | 	.quad 0
0x438: 0000000000000000     | 	.quad 0
0x440: 0000000000000000     | 	.quad 0
0x448: 0000000000000000     | 	.quad 0
0x450: 0000000000000000     | 	.quad 0
0x458: 0000000000000000     | 	.quad 0
0x460: 0000000000000000     | 	.quad 0
0x468: 0000000000000000     | 	.quad 0
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
                            | 
0x490:                      | Stack:

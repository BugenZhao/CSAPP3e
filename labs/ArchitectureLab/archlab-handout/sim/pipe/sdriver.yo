                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e001000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f63801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f70801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 
                            | #	xorq 	%rax, %rax		# count = 0;
0x032: c0f2ffffffffffffffff | 	iaddq	$-1, %rdx
0x03c: 768300000000000000   | 	jg		loop0			# len >= 2
0x045:                      | test_rest:
0x045: c0f20100000000000000 | 	iaddq	$1, %rdx
0x04f: 765900000000000000   | 	jg		rest
0x058: 90                   | 	ret
0x059:                      | rest:
0x059: 50870000000000000000 | 	mrmovq	(%rdi), %r8
0x063: 40860000000000000000 | 	rmmovq	%r8, (%rsi)
0x06d: 6288                 | 	andq	%r8, %r8
0x06f: 710501000000000000   | 	jle		Done
0x078: c0f00100000000000000 | 	iaddq	$1, %rax
0x082: 90                   | 	ret
0x083:                      | loop0:
0x083: 50870000000000000000 | 	mrmovq	(%rdi), %r8
0x08d: c0f71000000000000000 | 	iaddq	$16, %rdi
0x097: 40860000000000000000 | 	rmmovq	%r8, (%rsi)
0x0a1: 6288                 | 	andq	%r8, %r8
0x0a3: 71b600000000000000   | 	jle		loop1
0x0ac: c0f00100000000000000 | 	iaddq	$1, %rax
0x0b6:                      | loop1:
0x0b6: 5087f8ffffffffffffff | 	mrmovq	-8(%rdi), %r8
0x0c0: c0f61000000000000000 | 	iaddq	$16, %rsi
0x0ca: 4086f8ffffffffffffff | 	rmmovq	%r8, -8(%rsi)
0x0d4: 6288                 | 	andq	%r8, %r8
0x0d6: 71e900000000000000   | 	jle 	loop2
0x0df: c0f00100000000000000 | 	iaddq	$1, %rax
0x0e9:                      | loop2:
0x0e9: c0f2feffffffffffffff | 	iaddq	$-2, %rdx
0x0f3: 768300000000000000   | 	jg		loop0
0x0fc: 704500000000000000   | 	jmp		test_rest
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x105:                      | Done:
0x105: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x106:                      | End:
                            | #/* $end ncopy-ys */
0x106:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x108:                      | 	.align 8
0x108:                      | src:
0x108: 0100000000000000     | 	.quad 1
0x110: 0200000000000000     | 	.quad 2
0x118: fdffffffffffffff     | 	.quad -3
0x120: fcffffffffffffff     | 	.quad -4
0x128: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x130:                      | 	.align 16
0x130:                      | Predest:
0x130: fadebc0000000000     | 	.quad 0xbcdefa
0x138:                      | dest:
0x138: abefcd0000000000     | 	.quad 0xcdefab
0x140: abefcd0000000000     | 	.quad 0xcdefab
0x148: abefcd0000000000     | 	.quad 0xcdefab
0x150: abefcd0000000000     | 	.quad 0xcdefab
0x158:                      | Postdest:
0x158: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x160:                      | .align 8
                            | # Run time stack
0x160: 0000000000000000     | 	.quad 0
0x168: 0000000000000000     | 	.quad 0
0x170: 0000000000000000     | 	.quad 0
0x178: 0000000000000000     | 	.quad 0
0x180: 0000000000000000     | 	.quad 0
0x188: 0000000000000000     | 	.quad 0
0x190: 0000000000000000     | 	.quad 0
0x198: 0000000000000000     | 	.quad 0
0x1a0: 0000000000000000     | 	.quad 0
0x1a8: 0000000000000000     | 	.quad 0
0x1b0: 0000000000000000     | 	.quad 0
0x1b8: 0000000000000000     | 	.quad 0
0x1c0: 0000000000000000     | 	.quad 0
0x1c8: 0000000000000000     | 	.quad 0
0x1d0: 0000000000000000     | 	.quad 0
0x1d8: 0000000000000000     | 	.quad 0
                            | 
0x1e0:                      | Stack:
